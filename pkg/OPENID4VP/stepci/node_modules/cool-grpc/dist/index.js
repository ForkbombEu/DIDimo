"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeRequest = void 0;
const grpc = __importStar(require("@grpc/grpc-js"));
const protoLoader = __importStar(require("@grpc/proto-loader"));
const credentials_1 = __importDefault(require("./credentials"));
const defaultLoaderOptions = {
    keepCase: true,
    longs: String,
    enums: String,
    defaults: true,
    oneofs: true
};
async function makeRequest(proto, { beforeRequest, afterResponse, loaderOptions = defaultLoaderOptions, options = {}, ...clientConfig }) {
    return new Promise(async (resolve, reject) => {
        try {
            const packageDefinition = await protoLoader.load(proto, loaderOptions);
            const { requestSerialize, responseDeserialize, requestStream, responseStream } = packageDefinition[clientConfig.service][clientConfig.method];
            if (requestStream && responseStream)
                return reject(new Error(`cool-grpc doesn't support bidirectional streams at the moment`));
            const credentials = (0, credentials_1.default)(clientConfig);
            const client = new grpc.Client(clientConfig.host, credentials);
            if (beforeRequest)
                beforeRequest(clientConfig);
            const metadata = new grpc.Metadata();
            for (const key in clientConfig.metadata) {
                metadata.add(key, clientConfig.metadata[key]);
            }
            // Unary call
            if (!requestStream && !responseStream) {
                const messageEncoded = requestSerialize(clientConfig.data);
                const response = { data: {}, size: 0 };
                const res = client.makeUnaryRequest(`/${clientConfig.service}/${clientConfig.method}`, x => x, x => x, messageEncoded, metadata, options, (error, message) => {
                    if (error)
                        return reject(error);
                    if (message) {
                        response.data = responseDeserialize(message);
                        response.size = message.byteLength;
                        if (afterResponse)
                            afterResponse(response);
                        return resolve(response);
                    }
                });
                res.on('status', status => {
                    response.statusCode = status.code;
                    response.statusMessage = status.details;
                });
                res.on('metadata', metadata => {
                    response.metadata = metadata.toJSON();
                });
                clientConfig.signal?.addEventListener('abort', () => {
                    res.cancel();
                });
            }
            // Client-side streaming
            if (requestStream) {
                const response = { data: {}, size: 0 };
                const stream = client.makeClientStreamRequest(`/${clientConfig.service}/${clientConfig.method}`, x => x, x => x, metadata, options, (error, message) => {
                    if (error)
                        return reject(error);
                    if (message) {
                        response.data = responseDeserialize(message),
                            response.size = message.byteLength;
                        if (afterResponse)
                            afterResponse(response);
                        return resolve(response);
                    }
                });
                const data = Array.isArray(clientConfig.data) ? clientConfig.data : [clientConfig.data];
                data.map((messageData) => {
                    const messageEncoded = requestSerialize(messageData);
                    stream.write(messageEncoded);
                });
                stream.on('status', status => {
                    response.statusCode = status.code;
                    response.statusMessage = status.details;
                });
                stream.on('metadata', metadata => {
                    response.metadata = metadata.toJSON();
                });
                stream.end();
                clientConfig.signal?.addEventListener('abort', () => {
                    stream.cancel();
                });
            }
            // Server-side streaming
            if (responseStream) {
                const messageEncoded = requestSerialize(clientConfig.data);
                const response = { data: {}, size: 0 };
                const stream = client.makeServerStreamRequest(`/${clientConfig.service}/${clientConfig.method}`, x => x, x => x, messageEncoded, metadata, options);
                const messages = [];
                let totalSize = 0;
                stream.on('data', (message) => {
                    if (message) {
                        messages.push(responseDeserialize(message));
                        totalSize += message.byteLength;
                    }
                });
                stream.on('end', () => {
                    response.data = messages;
                    response.size = totalSize;
                    if (afterResponse)
                        afterResponse(response);
                    resolve(response);
                });
                stream.on('error', reject);
                stream.on('status', status => {
                    response.statusCode = status.code;
                    response.statusMessage = status.details;
                });
                stream.on('metadata', metadata => {
                    response.metadata = metadata.toJSON();
                });
                clientConfig.signal?.addEventListener('abort', () => {
                    stream.cancel();
                });
            }
        }
        catch (e) {
            reject(e);
        }
    });
}
exports.makeRequest = makeRequest;
