"use strict";
import debugFactory from "debug";
const log = debugFactory("tgwf:sustainable-web-design");
import { fileSize } from "./constants/index.js";
import { formatNumber } from "./helpers/index.js";
const KWH_PER_GB = 0.81;
const END_USER_DEVICE_ENERGY = 0.52;
const NETWORK_ENERGY = 0.14;
const DATACENTER_ENERGY = 0.15;
const PRODUCTION_ENERGY = 0.19;
const GLOBAL_INTENSITY = 442;
const RENEWABLES_INTENSITY = 50;
const FIRST_TIME_VIEWING_PERCENTAGE = 0.75;
const RETURNING_VISITOR_PERCENTAGE = 0.25;
const PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD = 0.02;
class SustainableWebDesign {
  constructor(options) {
    this.options = options;
  }
  energyPerByteByComponent(bytes) {
    const transferedBytesToGb = bytes / fileSize.GIGABYTE;
    const energyUsage = transferedBytesToGb * KWH_PER_GB;
    return {
      consumerDeviceEnergy: energyUsage * END_USER_DEVICE_ENERGY,
      networkEnergy: energyUsage * NETWORK_ENERGY,
      productionEnergy: energyUsage * PRODUCTION_ENERGY,
      dataCenterEnergy: energyUsage * DATACENTER_ENERGY
    };
  }
  co2byComponent(energyBycomponent, carbonIntensity = GLOBAL_INTENSITY) {
    const returnCO2ByComponent = {};
    for (const [key, value] of Object.entries(energyBycomponent)) {
      if (key.startsWith("dataCenterEnergy")) {
        returnCO2ByComponent[key] = value * carbonIntensity;
      } else {
        returnCO2ByComponent[key] = value * GLOBAL_INTENSITY;
      }
    }
    return returnCO2ByComponent;
  }
  perByte(bytes, carbonIntensity = GLOBAL_INTENSITY) {
    const energyBycomponent = this.energyPerByteByComponent(bytes);
    if (Boolean(carbonIntensity) === false) {
      carbonIntensity = GLOBAL_INTENSITY;
    }
    if (carbonIntensity === true) {
      carbonIntensity = RENEWABLES_INTENSITY;
    }
    if (typeof carbonIntensity !== "number") {
      throw new Error(`perByte expects a numeric value or boolean for the carbon intensity value. Received: ${carbonIntensity}`);
    }
    const co2ValuesbyComponent = this.co2byComponent(energyBycomponent, carbonIntensity);
    const co2Values = Object.values(co2ValuesbyComponent);
    return co2Values.reduce((prevValue, currentValue) => prevValue + currentValue);
  }
  perVisit(bytes, carbonIntensity = GLOBAL_INTENSITY) {
    const energyBycomponent = this.energyPerVisitByComponent(bytes);
    if (Boolean(carbonIntensity) === false) {
      carbonIntensity = GLOBAL_INTENSITY;
    }
    if (carbonIntensity === true) {
      carbonIntensity = RENEWABLES_INTENSITY;
    }
    if (typeof carbonIntensity !== "number") {
      throw new Error(`perVisit expects a numeric value or boolean for the carbon intensity value. Received: ${carbonIntensity}`);
    }
    const co2ValuesbyComponent = this.co2byComponent(energyBycomponent, carbonIntensity);
    const co2Values = Object.values(co2ValuesbyComponent);
    return co2Values.reduce((prevValue, currentValue) => prevValue + currentValue);
  }
  energyPerByte(bytes) {
    const energyByComponent = this.energyPerByteByComponent(bytes);
    const energyValues = Object.values(energyByComponent);
    return energyValues.reduce((prevValue, currentValue) => prevValue + currentValue);
  }
  energyPerVisitByComponent(bytes, firstView = FIRST_TIME_VIEWING_PERCENTAGE, returnView = RETURNING_VISITOR_PERCENTAGE, dataReloadRatio = PERCENTAGE_OF_DATA_LOADED_ON_SUBSEQUENT_LOAD) {
    const energyBycomponent = this.energyPerByteByComponent(bytes);
    const cacheAdjustedSegmentEnergy = {};
    log({ energyBycomponent });
    const energyValues = Object.values(energyBycomponent);
    for (const [key, value] of Object.entries(energyBycomponent)) {
      cacheAdjustedSegmentEnergy[`${key} - first`] = value * firstView;
      cacheAdjustedSegmentEnergy[`${key} - subsequent`] = value * returnView * dataReloadRatio;
    }
    log({ cacheAdjustedSegmentEnergy });
    return cacheAdjustedSegmentEnergy;
  }
  energyPerVisit(bytes) {
    let firstVisits = 0;
    let subsequentVisits = 0;
    const energyBycomponent = Object.entries(this.energyPerVisitByComponent(bytes));
    for (const [key, val] of energyBycomponent) {
      if (key.indexOf("first") > 0) {
        firstVisits += val;
      }
    }
    for (const [key, val] of energyBycomponent) {
      if (key.indexOf("subsequent") > 0) {
        subsequentVisits += val;
      }
    }
    return firstVisits + subsequentVisits;
  }
  emissionsPerVisitInGrams(energyPerVisit, carbonintensity = GLOBAL_INTENSITY) {
    return formatNumber(energyPerVisit * carbonintensity);
  }
  annualEnergyInKwh(energyPerVisit, monthlyVisitors = 1e3) {
    return energyPerVisit * monthlyVisitors * 12;
  }
  annualEmissionsInGrams(co2grams, monthlyVisitors = 1e3) {
    return co2grams * monthlyVisitors * 12;
  }
  annualSegmentEnergy(annualEnergy) {
    return {
      consumerDeviceEnergy: formatNumber(annualEnergy * END_USER_DEVICE_ENERGY),
      networkEnergy: formatNumber(annualEnergy * NETWORK_ENERGY),
      dataCenterEnergy: formatNumber(annualEnergy * DATACENTER_ENERGY),
      productionEnergy: formatNumber(annualEnergy * PRODUCTION_ENERGY)
    };
  }
}
var sustainable_web_design_default = SustainableWebDesign;
export {
  SustainableWebDesign,
  sustainable_web_design_default as default
};
