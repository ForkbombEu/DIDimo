var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var hosting_node_exports = {};
__export(hosting_node_exports, {
  default: () => hosting_node_default
});
module.exports = __toCommonJS(hosting_node_exports);
var import_https = __toESM(require("https"));
var import_debug = __toESM(require("debug"));
var import_hosting_json_node = __toESM(require("./hosting-json.node.js"));
const log = (0, import_debug.default)("tgwf:hosting-node");
async function getBody(url) {
  return new Promise(function(resolve, reject) {
    const req = import_https.default.get(url, function(res) {
      if (res.statusCode < 200 || res.statusCode >= 300) {
        log("Could not get info from the Green Web Foundation API, %s for %s", res.statusCode, url);
        return reject(new Error(`Status Code: ${res.statusCode}`));
      }
      const data = [];
      res.on("data", (chunk) => {
        data.push(chunk);
      });
      res.on("end", () => resolve(Buffer.concat(data).toString()));
    });
    req.end();
  });
}
function check(domain, db) {
  if (db) {
    return import_hosting_json_node.default.check(domain, db);
  }
  if (typeof domain === "string") {
    return checkAgainstAPI(domain);
  } else {
    return checkDomainsAgainstAPI(domain);
  }
}
async function checkAgainstAPI(domain) {
  const res = JSON.parse(await getBody(`https://api.thegreenwebfoundation.org/greencheck/${domain}`));
  return res.green;
}
async function checkDomainsAgainstAPI(domains) {
  try {
    const allGreenCheckResults = JSON.parse(await getBody(`https://api.thegreenwebfoundation.org/v2/greencheckmulti/${JSON.stringify(domains)}`));
    return import_hosting_json_node.default.greenDomainsFromResults(allGreenCheckResults);
  } catch (e) {
    return [];
  }
}
async function checkPage(pageXray, db) {
  const domains = Object.keys(pageXray.domains);
  return check(domains, db);
}
var hosting_node_default = {
  check,
  checkPage,
  greendomains: import_hosting_json_node.default.greenDomainsFromResults,
  loadJSON: import_hosting_json_node.default.loadJSON
};
//# sourceMappingURL=hosting-node.js.map
