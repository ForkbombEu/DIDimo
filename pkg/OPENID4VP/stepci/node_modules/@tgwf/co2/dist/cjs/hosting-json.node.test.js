"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_hosting_json_node = __toESM(require("./hosting-json.node.js"));
var import_path = __toESM(require("path"));
describe("hostingJSON", () => {
  const jsonPath = import_path.default.resolve(__dirname, "..", "data", "fixtures", "url2green.test.json");
  const jsonPathGz = import_path.default.resolve(__dirname, "..", "data", "fixtures", "url2green.test.json.gz");
  describe("checking a single domain with #check", () => {
    test("against the list of domains as JSON", async () => {
      const db = await import_hosting_json_node.default.loadJSON(jsonPath);
      const res = await import_hosting_json_node.default.check("google.com", db);
      expect(res).toEqual(true);
    });
    test("against the list of domains as JSON loaded from a gzipped JSON", async () => {
      const db = await import_hosting_json_node.default.loadJSON(jsonPathGz);
      const res = await import_hosting_json_node.default.check("google.com", db);
      expect(res).toEqual(true);
    });
  });
  describe("implicitly checking multiple domains with #check", () => {
    test("against the list of domains as JSON", async () => {
      const db = await import_hosting_json_node.default.loadJSON(jsonPath);
      const domains = ["google.com", "kochindustries.com"];
      const res = await import_hosting_json_node.default.check(domains, db);
      expect(res).toContain("google.com");
    });
  });
});
//# sourceMappingURL=hosting-json.node.test.js.map
