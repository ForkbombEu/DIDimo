var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_sustainable_web_design = __toESM(require("./sustainable-web-design.js"));
describe("sustainable web design model", () => {
  const swd = new import_sustainable_web_design.default();
  const averageWebsiteInBytes = 22577152e-1;
  describe("energyPerByteByComponent", () => {
    it("should return a object with numbers for each system component", () => {
      const groupedEnergy = swd.energyPerByteByComponent(averageWebsiteInBytes);
      expect(groupedEnergy.consumerDeviceEnergy).toBeCloseTo(95095e-8, 8);
      expect(groupedEnergy.networkEnergy).toBeCloseTo(25602e-8, 7);
      expect(groupedEnergy.dataCenterEnergy).toBeCloseTo(27431e-8, 8);
      expect(groupedEnergy.productionEnergy).toBeCloseTo(3475e-7, 7);
    });
  });
  describe("energyPerByte", () => {
    it("should return a number in kilowatt hours for the given data transfer in bytes", () => {
      const energyForTransfer = swd.energyPerByte(averageWebsiteInBytes);
      expect(energyForTransfer).toBeCloseTo(182874e-8, 7);
    });
  });
  describe("perByte", () => {
    it("should return a single number for CO2 emissions", () => {
      expect(typeof swd.perByte(22577152e-1)).toBe("number");
    });
  });
  describe("perVisit", () => {
    it("should return a single number for CO2 emissions", () => {
      expect(typeof swd.perVisit(22577152e-1)).toBe("number");
    });
  });
  describe("energyPerVisit", () => {
    it("should return a number", () => {
      expect(typeof swd.energyPerVisit(averageWebsiteInBytes)).toBe("number");
    });
    it("should calculate the correct energy", () => {
      expect(swd.energyPerVisit(averageWebsiteInBytes)).toBe(0.0013807057305600004);
    });
  });
  describe("emissionsPerVisitInGrams", () => {
    it("should calculate the correct co2 per visit", () => {
      const energy = swd.energyPerVisit(averageWebsiteInBytes);
      expect(swd.emissionsPerVisitInGrams(energy)).toEqual(0.61);
    });
    it("should accept a dynamic KwH value", () => {
      const energy = swd.energyPerVisit(averageWebsiteInBytes);
      expect(swd.emissionsPerVisitInGrams(energy, 245)).toEqual(0.34);
    });
  });
  describe("annualEnergyInKwh", () => {
    it("should calculate the correct energy in kWh", () => {
      expect(swd.annualEnergyInKwh(averageWebsiteInBytes)).toBe(27092582400);
    });
  });
  describe("annualEmissionsInGrams", () => {
    it("should calculate the corrent energy in grams", () => {
      expect(swd.annualEmissionsInGrams(averageWebsiteInBytes)).toBe(27092582400);
    });
  });
  describe("annualSegmentEnergy", () => {
    it("should return the correct values", () => {
      expect(swd.annualSegmentEnergy(averageWebsiteInBytes)).toEqual({
        consumerDeviceEnergy: 11740119e-1,
        dataCenterEnergy: 338657.28,
        networkEnergy: 316080.13,
        productionEnergy: 428965.89
      });
    });
  });
});
//# sourceMappingURL=sustainable-web-design.test.js.map
