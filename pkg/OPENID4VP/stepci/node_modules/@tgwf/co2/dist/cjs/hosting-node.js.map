{
  "version": 3,
  "sources": ["../../src/hosting-node.js"],
  "sourcesContent": ["/*\n\nWe have a separate node-specific hosting.js file for node.\nThis uses the node-specific APIs for making http requests,\nand doing lookups against local JSON and sqlite databases.\nThis is used in the CommonJS build of co2.js\n\nThis lets us keep the total library small, and dependencies minimal.\n*/\n\nimport https from \"https\";\n\nimport debugFactory from \"debug\";\nconst log = debugFactory(\"tgwf:hosting-node\");\n\nimport hostingJSON from \"./hosting-json.node.js\";\n\n/**\n * Accept a url and perform an http request, returning the body\n * for parsing as JSON.\n *\n * @param {string} url\n * @return {string}\n */\nasync function getBody(url) {\n  return new Promise(function (resolve, reject) {\n    // Do async job\n    const req = https.get(url, function (res) {\n      if (res.statusCode < 200 || res.statusCode >= 300) {\n        log(\n          \"Could not get info from the Green Web Foundation API, %s for %s\",\n          res.statusCode,\n          url\n        );\n        return reject(new Error(`Status Code: ${res.statusCode}`));\n      }\n      const data = [];\n\n      res.on(\"data\", (chunk) => {\n        data.push(chunk);\n      });\n\n      res.on(\"end\", () => resolve(Buffer.concat(data).toString()));\n    });\n    req.end();\n  });\n}\n\nfunction check(domain, db) {\n  if (db) {\n    return hostingJSON.check(domain, db);\n  }\n\n  // is it a single domain or an array of them?\n  if (typeof domain === \"string\") {\n    return checkAgainstAPI(domain);\n  } else {\n    return checkDomainsAgainstAPI(domain);\n  }\n}\n\nasync function checkAgainstAPI(domain) {\n  const res = JSON.parse(\n    await getBody(`https://api.thegreenwebfoundation.org/greencheck/${domain}`)\n  );\n  return res.green;\n}\n\nasync function checkDomainsAgainstAPI(domains) {\n  try {\n    const allGreenCheckResults = JSON.parse(\n      await getBody(\n        `https://api.thegreenwebfoundation.org/v2/greencheckmulti/${JSON.stringify(\n          domains\n        )}`\n      )\n    );\n    return hostingJSON.greenDomainsFromResults(allGreenCheckResults);\n  } catch (e) {\n    return [];\n  }\n}\n\nasync function checkPage(pageXray, db) {\n  const domains = Object.keys(pageXray.domains);\n  return check(domains, db);\n}\n\nexport default {\n  check,\n  checkPage,\n  greendomains: hostingJSON.greenDomainsFromResults,\n  loadJSON: hostingJSON.loadJSON,\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA,mBAAkB;AAElB,mBAAyB;AAGzB,+BAAwB;AAFxB,MAAM,MAAM,0BAAa,mBAAmB;AAW5C,uBAAuB,KAAK;AAC1B,SAAO,IAAI,QAAQ,SAAU,SAAS,QAAQ;AAE5C,UAAM,MAAM,qBAAM,IAAI,KAAK,SAAU,KAAK;AACxC,UAAI,IAAI,aAAa,OAAO,IAAI,cAAc,KAAK;AACjD,YACE,mEACA,IAAI,YACJ,GACF;AACA,eAAO,OAAO,IAAI,MAAM,gBAAgB,IAAI,YAAY,CAAC;AAAA,MAC3D;AACA,YAAM,OAAO,CAAC;AAEd,UAAI,GAAG,QAAQ,CAAC,UAAU;AACxB,aAAK,KAAK,KAAK;AAAA,MACjB,CAAC;AAED,UAAI,GAAG,OAAO,MAAM,QAAQ,OAAO,OAAO,IAAI,EAAE,SAAS,CAAC,CAAC;AAAA,IAC7D,CAAC;AACD,QAAI,IAAI;AAAA,EACV,CAAC;AACH;AAEA,eAAe,QAAQ,IAAI;AACzB,MAAI,IAAI;AACN,WAAO,iCAAY,MAAM,QAAQ,EAAE;AAAA,EACrC;AAGA,MAAI,OAAO,WAAW,UAAU;AAC9B,WAAO,gBAAgB,MAAM;AAAA,EAC/B,OAAO;AACL,WAAO,uBAAuB,MAAM;AAAA,EACtC;AACF;AAEA,+BAA+B,QAAQ;AACrC,QAAM,MAAM,KAAK,MACf,MAAM,QAAQ,oDAAoD,QAAQ,CAC5E;AACA,SAAO,IAAI;AACb;AAEA,sCAAsC,SAAS;AAC7C,MAAI;AACF,UAAM,uBAAuB,KAAK,MAChC,MAAM,QACJ,4DAA4D,KAAK,UAC/D,OACF,GACF,CACF;AACA,WAAO,iCAAY,wBAAwB,oBAAoB;AAAA,EACjE,SAAS,GAAP;AACA,WAAO,CAAC;AAAA,EACV;AACF;AAEA,yBAAyB,UAAU,IAAI;AACrC,QAAM,UAAU,OAAO,KAAK,SAAS,OAAO;AAC5C,SAAO,MAAM,SAAS,EAAE;AAC1B;AAEA,IAAO,uBAAQ;AAAA,EACb;AAAA,EACA;AAAA,EACA,cAAc,iCAAY;AAAA,EAC1B,UAAU,iCAAY;AACxB;",
  "names": []
}
