{
  "version": 3,
  "sources": ["../../src/co2.test.js"],
  "sourcesContent": ["\"use strict\";\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport pagexray from \"pagexray\";\n\nimport CO2 from \"./co2.js\";\nimport { averageIntensity, marginalIntensity } from \"./index.js\";\n\ndescribe(\"co2\", () => {\n  let har, co2;\n\n  describe(\"1 byte model\", () => {\n    const TGWF_GREY_VALUE = 0.20497;\n    const TGWF_GREEN_VALUE = 0.54704;\n    const TGWF_MIXED_VALUE = 0.16718;\n\n    const MILLION = 1000000;\n    const MILLION_GREY = 0.29081;\n    const MILLION_GREEN = 0.23196;\n\n    beforeEach(() => {\n      co2 = new CO2({ model: \"1byte\" });\n      har = JSON.parse(\n        fs.readFileSync(\n          path.resolve(__dirname, \"../data/fixtures/tgwf.har\"),\n          \"utf8\"\n        )\n      );\n    });\n\n    describe(\"perByte\", () => {\n      it(\"returns a CO2 number for data transfer using 'grey' power\", () => {\n        expect(co2.perByte(MILLION).toPrecision(5)).toBe(\n          MILLION_GREY.toPrecision(5)\n        );\n      });\n\n      it(\"returns a lower CO2 number for data transfer from domains using entirely 'green' power\", () => {\n        expect(co2.perByte(MILLION).toPrecision(5)).toBe(\n          MILLION_GREY.toPrecision(5)\n        );\n        expect(co2.perByte(MILLION, true).toPrecision(5)).toBe(\n          MILLION_GREEN.toPrecision(5)\n        );\n      });\n    });\n\n    describe(\"perPage\", () => {\n      it(\"returns CO2 for total transfer for page\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n\n        expect(co2.perPage(pageXrayRun).toPrecision(5)).toBe(\n          TGWF_GREY_VALUE.toPrecision(5)\n        );\n      });\n      it(\"returns lower CO2 for page served from green site\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n        let green = [\n          \"www.thegreenwebfoundation.org\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n        expect(co2.perPage(pageXrayRun, green)).toBeLessThan(TGWF_GREY_VALUE);\n      });\n      it(\"returns a lower CO2 number where *some* domains use green power\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n        // green can be true, or a array containing entries\n        let green = [\n          \"www.thegreenwebfoundation.org\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n        expect(co2.perPage(pageXrayRun, green).toPrecision(5)).toBe(\n          TGWF_MIXED_VALUE.toPrecision(5)\n        );\n      });\n    });\n    describe(\"perDomain\", () => {\n      it(\"shows object listing Co2 for each domain\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n        const res = co2.perDomain(pageXrayRun);\n\n        const domains = [\n          \"thegreenwebfoundation.org\",\n          \"www.thegreenwebfoundation.org\",\n          \"maxcdn.bootstrapcdn.com\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n\n        for (let obj of res) {\n          expect(domains.indexOf(obj.domain)).toBeGreaterThan(-1);\n          expect(typeof obj.co2).toBe(\"number\");\n        }\n      });\n      it(\"shows lower Co2 for green domains\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n\n        const greenDomains = [\n          \"www.thegreenwebfoundation.org\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n        const res = co2.perDomain(pageXrayRun);\n        const resWithGreen = co2.perDomain(pageXrayRun, greenDomains);\n\n        for (let obj of res) {\n          expect(typeof obj.co2).toBe(\"number\");\n        }\n        for (let obj of greenDomains) {\n          let index = 0;\n          expect(resWithGreen[index].co2).toBeLessThan(res[index].co2);\n          index++;\n        }\n      });\n    });\n  });\n\n  describe(\"Sustainable Web Design model as simple option\", () => {\n    // the SWD model should have slightly higher values as\n    // we include more of the system in calculations for the\n    // same levels of data transfer\n    const MILLION = 1000000;\n    const MILLION_GREY = 0.35802;\n    const MILLION_GREEN = 0.31039;\n    const MILLION_PERVISIT_GREY = 0.27031;\n    const MILLION_PERVISIT_GREEN = 0.23435;\n\n    const TGWF_GREY_VALUE = 0.25234;\n    const TGWF_GREEN_VALUE = 0.54704;\n    const TGWF_MIXED_VALUE = 0.22175;\n\n    // We're not passing in a model parameter here to check that SWD is used by default\n    beforeEach(() => {\n      co2 = new CO2();\n      har = JSON.parse(\n        fs.readFileSync(\n          path.resolve(__dirname, \"../data/fixtures/tgwf.har\"),\n          \"utf8\"\n        )\n      );\n    });\n\n    describe(\"perByte\", () => {\n      it(\"returns a CO2 number for data transfer\", () => {\n        co2.perByte(MILLION);\n        expect(co2.perByte(MILLION).toPrecision(5)).toBe(\n          MILLION_GREY.toPrecision(5)\n        );\n      });\n\n      it(\"returns a lower CO2 number for data transfer from domains using entirely 'green' power\", () => {\n        expect(co2.perByte(MILLION, false).toPrecision(5)).toBe(\n          MILLION_GREY.toPrecision(5)\n        );\n\n        expect(co2.perByte(MILLION, true).toPrecision(5)).toBe(\n          MILLION_GREEN.toPrecision(5)\n        );\n      });\n    });\n\n    describe(\"perVisit\", () => {\n      it(\"returns a CO2 number for data transfer per visit with caching assumptions from the Sustainable Web Design model\", () => {\n        co2.perVisit(MILLION);\n        expect(co2.perVisit(MILLION).toPrecision(5)).toBe(\n          MILLION_PERVISIT_GREY.toPrecision(5)\n        );\n      });\n\n      it(\"returns a lower CO2 number for data transfer from domains using entirely 'green' power\", () => {\n        expect(co2.perVisit(MILLION, false).toPrecision(5)).toBe(\n          MILLION_PERVISIT_GREY.toPrecision(5)\n        );\n\n        expect(co2.perVisit(MILLION, true).toPrecision(5)).toBe(\n          MILLION_PERVISIT_GREEN.toPrecision(5)\n        );\n      });\n    });\n\n    describe(\"perPage\", () => {\n      it(\"returns CO2 for total transfer for page\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n\n        expect(co2.perPage(pageXrayRun).toPrecision(5)).toBe(\n          TGWF_GREY_VALUE.toPrecision(5)\n        );\n      });\n      it(\"returns lower CO2 for page served from green site\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n        let green = [\n          \"www.thegreenwebfoundation.org\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n        expect(co2.perPage(pageXrayRun, green)).toBeLessThan(TGWF_GREY_VALUE);\n      });\n      it(\"returns a lower CO2 number where *some* domains use green power\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n        // green can be true, or a array containing entries\n        let green = [\n          \"www.thegreenwebfoundation.org\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n        expect(co2.perPage(pageXrayRun, green).toPrecision(5)).toBe(\n          TGWF_MIXED_VALUE.toPrecision(5)\n        );\n      });\n    });\n    describe(\"perDomain\", () => {\n      it(\"shows object listing Co2 for each domain\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n        const res = co2.perDomain(pageXrayRun);\n\n        const domains = [\n          \"thegreenwebfoundation.org\",\n          \"www.thegreenwebfoundation.org\",\n          \"maxcdn.bootstrapcdn.com\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n\n        for (let obj of res) {\n          expect(domains.indexOf(obj.domain)).toBeGreaterThan(-1);\n          expect(typeof obj.co2).toBe(\"number\");\n        }\n      });\n      it(\"shows lower Co2 for green domains\", () => {\n        const pages = pagexray.convert(har);\n        const pageXrayRun = pages[0];\n\n        const greenDomains = [\n          \"www.thegreenwebfoundation.org\",\n          \"fonts.googleapis.com\",\n          \"ajax.googleapis.com\",\n          \"assets.digitalclimatestrike.net\",\n          \"cdnjs.cloudflare.com\",\n          \"graphite.thegreenwebfoundation.org\",\n          \"analytics.thegreenwebfoundation.org\",\n          \"fonts.gstatic.com\",\n          \"api.thegreenwebfoundation.org\",\n        ];\n        const res = co2.perDomain(pageXrayRun);\n        const resWithGreen = co2.perDomain(pageXrayRun, greenDomains);\n\n        for (let obj of res) {\n          expect(typeof obj.co2).toBe(\"number\");\n        }\n        for (let obj of greenDomains) {\n          let index = 0;\n          expect(resWithGreen[index].co2).toBeLessThan(res[index].co2);\n          index++;\n        }\n      });\n    });\n  });\n\n  describe(\"Error checking\", () => {\n    // Test for error if incorrect model is passed\n    it(\"throws an error if model is not valid\", () => {\n      expect(() => (co2 = new CO2({ model: \"1direction\" }))).toThrowError(\n        `\"1direction\" is not a valid model. Please use \"1byte\" for the OneByte model, and \"swd\" for the Sustainable Web Design model.\\nSee https://developers.thegreenwebfoundation.org/co2js/models/ to learn more about the models available in CO2.js.`\n      );\n    });\n\n    // Test that an error is thrown when using the OneByte model with the perVisit method.\n    it(\"throws an error if perVisit method is not supported by model\", () => {\n      expect(() => {\n        co2 = new CO2({ model: \"1byte\" });\n        co2.perVisit(10);\n      }).toThrowError(\n        `The perVisit() method is not supported in the model you are using. Try using perByte() instead.\\nSee https://developers.thegreenwebfoundation.org/co2js/methods/ to learn more about the methods available in CO2.js.`\n      );\n    });\n  });\n\n  // Test that grid intensity data can be imported and used\n  describe(\"Importing grid intensity\", () => {\n    describe(\"average intensity\", () => {\n      it(\"imports average intensity data\", () => {\n        expect(averageIntensity).toHaveProperty(\"type\", \"average\");\n      });\n    });\n\n    describe(\"marginal intensity\", () => {\n      it(\"imports average intensity data\", () => {\n        expect(marginalIntensity).toHaveProperty(\"type\", \"marginal\");\n      });\n    });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAEA,gBAAe;AACf,kBAAiB;AAEjB,sBAAqB;AAErB,iBAAgB;AAChB,mBAAoD;AAEpD,SAAS,OAAO,MAAM;AACpB,MAAI,KAAK;AAET,WAAS,gBAAgB,MAAM;AAC7B,UAAM,kBAAkB;AACxB,UAAM,mBAAmB;AACzB,UAAM,mBAAmB;AAEzB,UAAM,UAAU;AAChB,UAAM,eAAe;AACrB,UAAM,gBAAgB;AAEtB,eAAW,MAAM;AACf,YAAM,IAAI,mBAAI,EAAE,OAAO,QAAQ,CAAC;AAChC,YAAM,KAAK,MACT,kBAAG,aACD,oBAAK,QAAQ,WAAW,2BAA2B,GACnD,MACF,CACF;AAAA,IACF,CAAC;AAED,aAAS,WAAW,MAAM;AACxB,SAAG,6DAA6D,MAAM;AACpE,eAAO,IAAI,QAAQ,OAAO,EAAE,YAAY,CAAC,CAAC,EAAE,KAC1C,aAAa,YAAY,CAAC,CAC5B;AAAA,MACF,CAAC;AAED,SAAG,0FAA0F,MAAM;AACjG,eAAO,IAAI,QAAQ,OAAO,EAAE,YAAY,CAAC,CAAC,EAAE,KAC1C,aAAa,YAAY,CAAC,CAC5B;AACA,eAAO,IAAI,QAAQ,SAAS,IAAI,EAAE,YAAY,CAAC,CAAC,EAAE,KAChD,cAAc,YAAY,CAAC,CAC7B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,aAAS,WAAW,MAAM;AACxB,SAAG,2CAA2C,MAAM;AAClD,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAE1B,eAAO,IAAI,QAAQ,WAAW,EAAE,YAAY,CAAC,CAAC,EAAE,KAC9C,gBAAgB,YAAY,CAAC,CAC/B;AAAA,MACF,CAAC;AACD,SAAG,qDAAqD,MAAM;AAC5D,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAC1B,YAAI,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,eAAO,IAAI,QAAQ,aAAa,KAAK,CAAC,EAAE,aAAa,eAAe;AAAA,MACtE,CAAC;AACD,SAAG,mEAAmE,MAAM;AAC1E,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAE1B,YAAI,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,eAAO,IAAI,QAAQ,aAAa,KAAK,EAAE,YAAY,CAAC,CAAC,EAAE,KACrD,iBAAiB,YAAY,CAAC,CAChC;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,aAAS,aAAa,MAAM;AAC1B,SAAG,4CAA4C,MAAM;AACnD,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAC1B,cAAM,MAAM,IAAI,UAAU,WAAW;AAErC,cAAM,UAAU;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,iBAAS,OAAO,KAAK;AACnB,iBAAO,QAAQ,QAAQ,IAAI,MAAM,CAAC,EAAE,gBAAgB,EAAE;AACtD,iBAAO,OAAO,IAAI,GAAG,EAAE,KAAK,QAAQ;AAAA,QACtC;AAAA,MACF,CAAC;AACD,SAAG,qCAAqC,MAAM;AAC5C,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAE1B,cAAM,eAAe;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,cAAM,MAAM,IAAI,UAAU,WAAW;AACrC,cAAM,eAAe,IAAI,UAAU,aAAa,YAAY;AAE5D,iBAAS,OAAO,KAAK;AACnB,iBAAO,OAAO,IAAI,GAAG,EAAE,KAAK,QAAQ;AAAA,QACtC;AACA,iBAAS,OAAO,cAAc;AAC5B,cAAI,QAAQ;AACZ,iBAAO,aAAa,OAAO,GAAG,EAAE,aAAa,IAAI,OAAO,GAAG;AAC3D;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AAED,WAAS,iDAAiD,MAAM;AAI9D,UAAM,UAAU;AAChB,UAAM,eAAe;AACrB,UAAM,gBAAgB;AACtB,UAAM,wBAAwB;AAC9B,UAAM,yBAAyB;AAE/B,UAAM,kBAAkB;AACxB,UAAM,mBAAmB;AACzB,UAAM,mBAAmB;AAGzB,eAAW,MAAM;AACf,YAAM,IAAI,mBAAI;AACd,YAAM,KAAK,MACT,kBAAG,aACD,oBAAK,QAAQ,WAAW,2BAA2B,GACnD,MACF,CACF;AAAA,IACF,CAAC;AAED,aAAS,WAAW,MAAM;AACxB,SAAG,0CAA0C,MAAM;AACjD,YAAI,QAAQ,OAAO;AACnB,eAAO,IAAI,QAAQ,OAAO,EAAE,YAAY,CAAC,CAAC,EAAE,KAC1C,aAAa,YAAY,CAAC,CAC5B;AAAA,MACF,CAAC;AAED,SAAG,0FAA0F,MAAM;AACjG,eAAO,IAAI,QAAQ,SAAS,KAAK,EAAE,YAAY,CAAC,CAAC,EAAE,KACjD,aAAa,YAAY,CAAC,CAC5B;AAEA,eAAO,IAAI,QAAQ,SAAS,IAAI,EAAE,YAAY,CAAC,CAAC,EAAE,KAChD,cAAc,YAAY,CAAC,CAC7B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,aAAS,YAAY,MAAM;AACzB,SAAG,mHAAmH,MAAM;AAC1H,YAAI,SAAS,OAAO;AACpB,eAAO,IAAI,SAAS,OAAO,EAAE,YAAY,CAAC,CAAC,EAAE,KAC3C,sBAAsB,YAAY,CAAC,CACrC;AAAA,MACF,CAAC;AAED,SAAG,0FAA0F,MAAM;AACjG,eAAO,IAAI,SAAS,SAAS,KAAK,EAAE,YAAY,CAAC,CAAC,EAAE,KAClD,sBAAsB,YAAY,CAAC,CACrC;AAEA,eAAO,IAAI,SAAS,SAAS,IAAI,EAAE,YAAY,CAAC,CAAC,EAAE,KACjD,uBAAuB,YAAY,CAAC,CACtC;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,aAAS,WAAW,MAAM;AACxB,SAAG,2CAA2C,MAAM;AAClD,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAE1B,eAAO,IAAI,QAAQ,WAAW,EAAE,YAAY,CAAC,CAAC,EAAE,KAC9C,gBAAgB,YAAY,CAAC,CAC/B;AAAA,MACF,CAAC;AACD,SAAG,qDAAqD,MAAM;AAC5D,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAC1B,YAAI,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,eAAO,IAAI,QAAQ,aAAa,KAAK,CAAC,EAAE,aAAa,eAAe;AAAA,MACtE,CAAC;AACD,SAAG,mEAAmE,MAAM;AAC1E,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAE1B,YAAI,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,eAAO,IAAI,QAAQ,aAAa,KAAK,EAAE,YAAY,CAAC,CAAC,EAAE,KACrD,iBAAiB,YAAY,CAAC,CAChC;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,aAAS,aAAa,MAAM;AAC1B,SAAG,4CAA4C,MAAM;AACnD,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAC1B,cAAM,MAAM,IAAI,UAAU,WAAW;AAErC,cAAM,UAAU;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,iBAAS,OAAO,KAAK;AACnB,iBAAO,QAAQ,QAAQ,IAAI,MAAM,CAAC,EAAE,gBAAgB,EAAE;AACtD,iBAAO,OAAO,IAAI,GAAG,EAAE,KAAK,QAAQ;AAAA,QACtC;AAAA,MACF,CAAC;AACD,SAAG,qCAAqC,MAAM;AAC5C,cAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,cAAM,cAAc,MAAM;AAE1B,cAAM,eAAe;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,cAAM,MAAM,IAAI,UAAU,WAAW;AACrC,cAAM,eAAe,IAAI,UAAU,aAAa,YAAY;AAE5D,iBAAS,OAAO,KAAK;AACnB,iBAAO,OAAO,IAAI,GAAG,EAAE,KAAK,QAAQ;AAAA,QACtC;AACA,iBAAS,OAAO,cAAc;AAC5B,cAAI,QAAQ;AACZ,iBAAO,aAAa,OAAO,GAAG,EAAE,aAAa,IAAI,OAAO,GAAG;AAC3D;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AAED,WAAS,kBAAkB,MAAM;AAE/B,OAAG,yCAAyC,MAAM;AAChD,aAAO,MAAO,MAAM,IAAI,mBAAI,EAAE,OAAO,aAAa,CAAC,CAAE,EAAE,aACrD;AAAA,mHACF;AAAA,IACF,CAAC;AAGD,OAAG,gEAAgE,MAAM;AACvE,aAAO,MAAM;AACX,cAAM,IAAI,mBAAI,EAAE,OAAO,QAAQ,CAAC;AAChC,YAAI,SAAS,EAAE;AAAA,MACjB,CAAC,EAAE,aACD;AAAA,qHACF;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAGD,WAAS,4BAA4B,MAAM;AACzC,aAAS,qBAAqB,MAAM;AAClC,SAAG,kCAAkC,MAAM;AACzC,eAAO,6BAAgB,EAAE,eAAe,QAAQ,SAAS;AAAA,MAC3D,CAAC;AAAA,IACH,CAAC;AAED,aAAS,sBAAsB,MAAM;AACnC,SAAG,kCAAkC,MAAM;AACzC,eAAO,8BAAiB,EAAE,eAAe,QAAQ,UAAU;AAAA,MAC7D,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
