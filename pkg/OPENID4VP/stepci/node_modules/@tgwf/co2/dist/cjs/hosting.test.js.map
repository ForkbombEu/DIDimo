{
  "version": 3,
  "sources": ["../../src/hosting.test.js"],
  "sourcesContent": ["\"use strict\";\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport pagexray from \"pagexray\";\n\nimport hosting from \"./hosting-node.js\";\n\nconst jsonPath = path.resolve(\n  __dirname,\n  \"..\",\n  \"data\",\n  \"fixtures\",\n  \"url2green.test.json\"\n);\n\ndescribe(\"hosting\", () => {\n  let har;\n  beforeEach(() => {\n    har = JSON.parse(\n      fs.readFileSync(\n        path.resolve(__dirname, \"../data/fixtures/tgwf.har\"),\n        \"utf8\"\n      )\n    );\n  });\n  describe(\"checking all domains on a page object with #checkPage\", () => {\n    it(\"returns a list of green domains, when passed a page object\", async () => {\n      const pages = pagexray.convert(har);\n      const pageXrayRun = pages[0];\n      const db = await hosting.loadJSON(jsonPath);\n      const greenDomains = await hosting.checkPage(pageXrayRun, db);\n\n      expect(greenDomains).toHaveLength(11);\n      const expectedGreendomains = [\n        \"maxcdn.bootstrapcdn.com\",\n        \"thegreenwebfoundation.org\",\n        \"www.thegreenwebfoundation.org\",\n        \"fonts.googleapis.com\",\n        \"ajax.googleapis.com\",\n        \"assets.digitalclimatestrike.net\",\n        \"cdnjs.cloudflare.com\",\n        \"graphite.thegreenwebfoundation.org\",\n        \"analytics.thegreenwebfoundation.org\",\n        \"fonts.gstatic.com\",\n        \"api.thegreenwebfoundation.org\",\n      ];\n      greenDomains.forEach((dom) => {\n        expect(expectedGreendomains).toContain(dom);\n      });\n    });\n  });\n  describe(\"checking a single domain with #check\", () => {\n    it(\"use the API instead\", async () => {\n      const db = await hosting.loadJSON(jsonPath);\n      const res = await hosting.check(\"google.com\");\n      expect(res).toEqual(true);\n    });\n  });\n  describe(\"checking multiple domains with #check\", () => {\n    it(\"Use the API\", async () => {\n      const db = await hosting.loadJSON(jsonPath);\n\n      const res = await hosting.check([\"google.com\", \"kochindustries.com\"]);\n      expect(res).toContain(\"google.com\");\n    });\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAEA,gBAAe;AACf,kBAAiB;AAEjB,sBAAqB;AAErB,0BAAoB;AAEpB,MAAM,WAAW,oBAAK,QACpB,WACA,MACA,QACA,YACA,qBACF;AAEA,SAAS,WAAW,MAAM;AACxB,MAAI;AACJ,aAAW,MAAM;AACf,UAAM,KAAK,MACT,kBAAG,aACD,oBAAK,QAAQ,WAAW,2BAA2B,GACnD,MACF,CACF;AAAA,EACF,CAAC;AACD,WAAS,yDAAyD,MAAM;AACtE,OAAG,8DAA8D,YAAY;AAC3E,YAAM,QAAQ,wBAAS,QAAQ,GAAG;AAClC,YAAM,cAAc,MAAM;AAC1B,YAAM,KAAK,MAAM,4BAAQ,SAAS,QAAQ;AAC1C,YAAM,eAAe,MAAM,4BAAQ,UAAU,aAAa,EAAE;AAE5D,aAAO,YAAY,EAAE,aAAa,EAAE;AACpC,YAAM,uBAAuB;AAAA,QAC3B;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,mBAAa,QAAQ,CAAC,QAAQ;AAC5B,eAAO,oBAAoB,EAAE,UAAU,GAAG;AAAA,MAC5C,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACD,WAAS,wCAAwC,MAAM;AACrD,OAAG,uBAAuB,YAAY;AACpC,YAAM,KAAK,MAAM,4BAAQ,SAAS,QAAQ;AAC1C,YAAM,MAAM,MAAM,4BAAQ,MAAM,YAAY;AAC5C,aAAO,GAAG,EAAE,QAAQ,IAAI;AAAA,IAC1B,CAAC;AAAA,EACH,CAAC;AACD,WAAS,yCAAyC,MAAM;AACtD,OAAG,eAAe,YAAY;AAC5B,YAAM,KAAK,MAAM,4BAAQ,SAAS,QAAQ;AAE1C,YAAM,MAAM,MAAM,4BAAQ,MAAM,CAAC,cAAc,oBAAoB,CAAC;AACpE,aAAO,GAAG,EAAE,UAAU,YAAY;AAAA,IACpC,CAAC;AAAA,EACH,CAAC;AACH,CAAC;",
  "names": []
}
