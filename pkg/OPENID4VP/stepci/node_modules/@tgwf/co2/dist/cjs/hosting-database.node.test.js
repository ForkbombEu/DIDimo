"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_path = __toESM(require("path"));
var import_debug = __toESM(require("debug"));
var import_url2green = require("@tgwf/url2green");
const log = (0, import_debug.default)("tgwf:url2green:test");
const dbPath = import_path.default.resolve(__dirname, "..", "data", "fixtures", "url2green.test.db");
describe("hostingDatabase", () => {
  describe("checking a single domain with #check", () => {
    test("tries to use a local database if available", async () => {
      const res = await import_url2green.hosting.check("google.com", dbPath);
      expect(res).toEqual(true);
    });
  });
  describe("implicitly checking multiple domains with #check", () => {
    test("tries to use a local database if available", async () => {
      const res = await import_url2green.hosting.check(["google.com", "kochindustries.com"], dbPath);
      expect(res).toContain("google.com");
    });
  });
});
//# sourceMappingURL=hosting-database.node.test.js.map
