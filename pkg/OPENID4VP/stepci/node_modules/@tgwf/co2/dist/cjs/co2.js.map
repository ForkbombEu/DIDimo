{
  "version": 3,
  "sources": ["../../src/co2.js"],
  "sourcesContent": ["\"use strict\";\n\nimport OneByte from \"./1byte.js\";\nimport SustainableWebDesign from \"./sustainable-web-design.js\";\n\nclass CO2 {\n  constructor(options) {\n    this.model = new SustainableWebDesign();\n    // Using optional chaining allows an empty object to be passed\n    // in without breaking the code.\n    if (options?.model === \"1byte\") {\n      this.model = new OneByte();\n    } else if (options?.model === \"swd\") {\n      this.model = new SustainableWebDesign();\n    } else if (options?.model) {\n      throw new Error(\n        `\"${options.model}\" is not a valid model. Please use \"1byte\" for the OneByte model, and \"swd\" for the Sustainable Web Design model.\\nSee https://developers.thegreenwebfoundation.org/co2js/models/ to learn more about the models available in CO2.js.`\n      );\n    }\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, and a boolean for whether\n   * the domain shows as 'green', and return a CO2 figure for energy used to shift the corresponding\n   * the data transfer.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @return {number} the amount of CO2 in grammes\n   */\n  perByte(bytes, green) {\n    return this.model.perByte(bytes, green);\n  }\n\n  /**\n   * Accept a figure in bytes for data transfer, and a boolean for whether\n   * the domain shows as 'green', and return a CO2 figure for energy used to shift the corresponding\n   * the data transfer.\n   *\n   * @param {number} bytes\n   * @param {boolean} green\n   * @return {number} the amount of CO2 in grammes\n   */\n  perVisit(bytes, green) {\n    if (this.model?.perVisit) {\n      return this.model.perVisit(bytes, green);\n    } else {\n      throw new Error(\n        `The perVisit() method is not supported in the model you are using. Try using perByte() instead.\\nSee https://developers.thegreenwebfoundation.org/co2js/methods/ to learn more about the methods available in CO2.js.`\n      );\n    }\n  }\n\n  perDomain(pageXray, greenDomains) {\n    const co2PerDomain = [];\n    for (let domain of Object.keys(pageXray.domains)) {\n      let co2;\n      if (greenDomains && greenDomains.indexOf(domain) > -1) {\n        co2 = this.perByte(pageXray.domains[domain].transferSize, true);\n      } else {\n        co2 = this.perByte(pageXray.domains[domain].transferSize);\n      }\n      co2PerDomain.push({\n        domain,\n        co2,\n        transferSize: pageXray.domains[domain].transferSize,\n      });\n    }\n    co2PerDomain.sort((a, b) => b.co2 - a.co2);\n\n    return co2PerDomain;\n  }\n\n  perPage(pageXray, green) {\n    // Accept an xray object, and if we receive a boolean as the second\n    // argument, we assume every request we make is sent to a server\n    // running on renwewable power.\n\n    // if we receive an array of domains, return a number accounting the\n    // reduced CO2 from green hosted domains\n\n    const domainCO2 = this.perDomain(pageXray, green);\n    let totalCO2 = 0;\n    for (let domain of domainCO2) {\n      totalCO2 += domain.co2;\n    }\n    return totalCO2;\n  }\n\n  perContentType(pageXray, greenDomains) {\n    const co2PerContentType = {};\n    for (let asset of pageXray.assets) {\n      const domain = new URL(asset.url).domain;\n      const transferSize = asset.transferSize;\n      const co2ForTransfer = this.perByte(\n        transferSize,\n        greenDomains && greenDomains.indexOf(domain) > -1\n      );\n      const contentType = asset.type;\n      if (!co2PerContentType[contentType]) {\n        co2PerContentType[contentType] = { co2: 0, transferSize: 0 };\n      }\n      co2PerContentType[contentType].co2 += co2ForTransfer;\n      co2PerContentType[contentType].transferSize += transferSize;\n    }\n    // restructure and sort\n    const all = [];\n    for (let type of Object.keys(co2PerContentType)) {\n      all.push({\n        type,\n        co2: co2PerContentType[type].co2,\n        transferSize: co2PerContentType[type].transferSize,\n      });\n    }\n    all.sort((a, b) => b.co2 - a.co2);\n    return all;\n  }\n\n  dirtiestResources(pageXray, greenDomains) {\n    const allAssets = [];\n    for (let asset of pageXray.assets) {\n      const domain = new URL(asset.url).domain;\n      const transferSize = asset.transferSize;\n      const co2ForTransfer = this.perByte(\n        transferSize,\n        greenDomains && greenDomains.indexOf(domain) > -1\n      );\n      allAssets.push({ url: asset.url, co2: co2ForTransfer, transferSize });\n    }\n    allAssets.sort((a, b) => b.co2 - a.co2);\n\n    return allAssets.slice(0, allAssets.length > 10 ? 10 : allAssets.length);\n  }\n\n  perParty(pageXray, greenDomains) {\n    let firstParty = 0;\n    let thirdParty = 0;\n    // calculate co2 per first/third party\n    const firstPartyRegEx = pageXray.firstPartyRegEx;\n    for (let d of Object.keys(pageXray.domains)) {\n      if (!d.match(firstPartyRegEx)) {\n        thirdParty += this.perByte(\n          pageXray.domains[d].transferSize,\n          greenDomains && greenDomains.indexOf(d) > -1\n        );\n      } else {\n        firstParty += this.perByte(\n          pageXray.domains[d].transferSize,\n          greenDomains && greenDomains.indexOf(d) > -1\n        );\n      }\n    }\n    return { firstParty, thirdParty };\n  }\n}\n\nexport { CO2 };\nexport default CO2;\n"],
  "mappings": "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",
  "names": []
}
