"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var import_fs = __toESM(require("fs"));
var import_path = __toESM(require("path"));
var import_pagexray = __toESM(require("pagexray"));
var import_hosting_node = __toESM(require("./hosting-node.js"));
const jsonPath = import_path.default.resolve(__dirname, "..", "data", "fixtures", "url2green.test.json");
describe("hosting", () => {
  let har;
  beforeEach(() => {
    har = JSON.parse(import_fs.default.readFileSync(import_path.default.resolve(__dirname, "../data/fixtures/tgwf.har"), "utf8"));
  });
  describe("checking all domains on a page object with #checkPage", () => {
    it("returns a list of green domains, when passed a page object", async () => {
      const pages = import_pagexray.default.convert(har);
      const pageXrayRun = pages[0];
      const db = await import_hosting_node.default.loadJSON(jsonPath);
      const greenDomains = await import_hosting_node.default.checkPage(pageXrayRun, db);
      expect(greenDomains).toHaveLength(11);
      const expectedGreendomains = [
        "maxcdn.bootstrapcdn.com",
        "thegreenwebfoundation.org",
        "www.thegreenwebfoundation.org",
        "fonts.googleapis.com",
        "ajax.googleapis.com",
        "assets.digitalclimatestrike.net",
        "cdnjs.cloudflare.com",
        "graphite.thegreenwebfoundation.org",
        "analytics.thegreenwebfoundation.org",
        "fonts.gstatic.com",
        "api.thegreenwebfoundation.org"
      ];
      greenDomains.forEach((dom) => {
        expect(expectedGreendomains).toContain(dom);
      });
    });
  });
  describe("checking a single domain with #check", () => {
    it("use the API instead", async () => {
      const db = await import_hosting_node.default.loadJSON(jsonPath);
      const res = await import_hosting_node.default.check("google.com");
      expect(res).toEqual(true);
    });
  });
  describe("checking multiple domains with #check", () => {
    it("Use the API", async () => {
      const db = await import_hosting_node.default.loadJSON(jsonPath);
      const res = await import_hosting_node.default.check(["google.com", "kochindustries.com"]);
      expect(res).toContain("google.com");
    });
  });
});
//# sourceMappingURL=hosting.test.js.map
