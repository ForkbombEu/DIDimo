"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseArgs = exports.defaultFilters = void 0;
const json5_1 = __importDefault(require("json5"));
const crypto = __importStar(require("crypto"));
exports.defaultFilters = {
    upcase: (value) => value.toUpperCase(),
    downcase: (value) => value.toLowerCase(),
    capitalize: (value) => value.charAt(0).toUpperCase() + value.slice(1),
    toInt: (value) => parseInt(value),
    toFloat: (value) => parseFloat(value),
    toString: (value) => value.toString(),
    append: (value, args) => value.concat(...args),
    base64_decode: (value) => atob(value),
    base64_encode: (value) => btoa(value),
    camelize: (value) => value.replace(/[_.-](\w|$)/g, (_, x) => x.toUpperCase()),
    escape: (value) => value.replace(/[&"'<>]/g, c => htmlEscapeLookup.get(c)),
    hmac_sha1: (value) => crypto.createHash("sha1").update(value).digest("hex"),
    hmac_sha256: (value) => crypto.createHash("sha256").update(value).digest("hex"),
    lstrip: (value) => value.trimStart(),
    md5: (value) => crypto.createHash("md5").update(value).digest("hex"),
    newline_to_br: (value) => value.replace(/\n/g, '<br/>'),
    pluralize: (value, args) => value.toString().concat(' ', parseInt(value) === 1 ? args[0] : args[1]),
    prepend: (value, args) => args[0].toString().concat(value),
    remove: (value, args) => value.replaceAll(args[0], ''),
    remove_first: (value, args) => replace_first(value, args[0], ''),
    remove_last: (value, args) => replace_last(value, args[0], ''),
    replace: (value, args) => value.replaceAll(args[0], args[1]),
    replace_first: (value, args) => replace_first(value, args[0], args[1]),
    replace_last: (value, args) => replace_last(value, args[0], args[1]),
    rstrip: (value) => value.trimEnd(),
    sha1: (value) => crypto.createHash("sha1").update(value).digest("hex"),
    sha256: (value) => crypto.createHash("sha256").update(value).digest("hex"),
    slice: (value, args) => Array.isArray(value) ? value.slice(args[0], args[1]) : value.toString().slice(args[0], args[1]),
    split: (value, args) => value.toString().split(args[0]),
    strip: (value) => value.trim(),
    strip_newlines: (value) => value.replace(/[\r\n]/g, ''),
    strip_html: (value) => value.toString().replace(/<[^>]+>/g, ''),
    url_encode: (value) => encodeURIComponent(value),
    url_decode: (value) => decodeURIComponent(value),
};
const QUOTED_STRING_REGEX = /^(["'])(?<string>.+)\1$/;
const splitPattern = /,(?![^{}]*})/g;
const htmlEscapeLookup = new Map([
    ['&', '&amp;'],
    ['"', '&quot;'],
    ['\'', '&apos;'],
    ['<', '&lt;'],
    ['>', '&gt;'],
]);
function replace_first(str, substr, newstr) {
    const pos = str.indexOf(substr);
    return pos < 0 ? str : str.substring(0, pos) + newstr + str.substring(pos + substr.length);
}
function replace_last(str, substr, newstr) {
    const pos = str.lastIndexOf(substr);
    return pos < 0 ? str : str.substring(0, pos) + newstr + str.substring(pos + substr.length);
}
const parseArgs = (args) => args.length > 0
    ? args
        .split(splitPattern)
        .map((arg) => arg.trim())
        .map((arg) => QUOTED_STRING_REGEX.test(arg) ? arg.slice(1, -1) : json5_1.default.parse(arg))
    : [];
exports.parseArgs = parseArgs;
